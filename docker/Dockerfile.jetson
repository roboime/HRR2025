# Base NVIDIA L4T image for JetPack 4.6 (L4T R32.6.1 - Ubuntu 18.04)
FROM nvcr.io/nvidia/l4t-base:r32.6.1

# Desabilita interações manuais no apt
ENV DEBIAN_FRONTEND=noninteractive 

# Define variáveis de ambiente ROS
ENV ROS_DISTRO=eloquent
ENV ROS_PYTHON_VERSION=3

# Configurar DNS para melhorar a conectividade
RUN echo "nameserver 8.8.8.8" > /etc/resolv.conf && \
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf

# (Opcional) Atualiza locale para UTF-8, se necessário
RUN apt-get update || true && apt-get install -y locales \
    && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8

# Adiciona chave e repositório do ROS2 Eloquent (Ubuntu 18.04 Bionic)
RUN apt-get update || true && apt-get install -y --no-install-recommends \
    curl gnupg2 lsb-release ca-certificates && \
    update-ca-certificates
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
    -o /usr/share/keyrings/ros-archive-keyring.gpg || true
RUN echo "deb [arch=arm64 signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \
    http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" \
    > /etc/apt/sources.list.d/ros2.list

# Adiciona repositórios do JetPack (para OpenCV e demais libs NVIDIA)
RUN apt-key adv --fetch-keys https://repo.download.nvidia.com/jetson/jetson-ota-public.asc 
RUN echo "deb https://repo.download.nvidia.com/jetson/common r32.6 main" \
    > /etc/apt/sources.list.d/nvidia-l4t-common.list && \
    echo "deb https://repo.download.nvidia.com/jetson/t210 r32.6 main" \
    > /etc/apt/sources.list.d/nvidia-l4t-t210.list

# Configurar permissões da câmera
RUN usermod -a -G video root

# Tentar instalar apenas o ROS2 básico primeiro
RUN for i in 1 2 3 4 5; do \
        echo "Tentativa $i de instalar ROS2..." && \
        apt-get update && \
        apt-get install -y --no-install-recommends \
            ros-eloquent-ros-base \
            ros-eloquent-image-transport \
            ros-eloquent-vision-opencv \
            ros-eloquent-vision-msgs \
            ros-eloquent-tf2 \
            ros-eloquent-tf2-ros \
            ros-eloquent-tf2-geometry-msgs \
            python3-colcon-common-extensions \
            python3-rosdep \
            python3-pip \
            python3-opencv && \
        break || \
        (echo "Falha na tentativa $i. Esperando..." && sleep 30); \
    done

# Inicializa o rosdep sem falhar se não funcionar
RUN rosdep init || echo "rosdep já inicializado ou falhou" && \
    rosdep update || echo "rosdep update falhou, continuando mesmo assim"

# Configura workspace ROS2
RUN mkdir -p /ros2_ws/src

# Configura variáveis de ambiente para ROS2
RUN echo 'source /opt/ros/eloquent/setup.bash' >> /root/.bashrc

# Criar diretório para requirements e scripts
RUN mkdir -p /setup

# Copia o arquivo requirements.txt para o container
# Nota: Este arquivo será usado para instalar as dependências quando o container estiver rodando
COPY requirements.txt /setup/

# Cria um script para instalar as dependências com melhor tratamento de codificação
RUN echo '#!/bin/bash\n\
echo "Instalando dependências básicas do sistema..."\n\
apt-get update && apt-get install -y build-essential cmake python3-dev libhdf5-dev\n\
\n\
echo "Definindo codificação UTF-8 para evitar problemas com caracteres especiais..."\n\
export PYTHONIOENCODING=utf-8\n\
export LANG=C.UTF-8\n\
export LC_ALL=C.UTF-8\n\
\n\
echo "Instalando dependências Python do requirements.txt..."\n\
cat /setup/requirements.txt | tr -d "\\r" > /setup/requirements_fixed.txt\n\
pip3 install -r /setup/requirements_fixed.txt\n\
\n\
# Verificar se a instalação do TensorFlow para Jetson falhou e usar alternativa\n\
if ! python3 -c "import tensorflow" &> /dev/null; then\n\
    echo "TensorFlow específico para Jetson falhou, tentando versão compatível alternativa..."\n\
    pip3 install tensorflow==2.4.0\n\
fi\n\
\n\
echo "Instalação concluída!"\n\
' > /setup/install_dependencies.sh && chmod +x /setup/install_dependencies.sh

# Cria um script de entrypoint melhorado
RUN echo '#!/bin/bash\n\
source /opt/ros/eloquent/setup.bash\n\
\n\
# Exibe informações úteis\n\
echo "=================================================="\n\
echo "Container ROS2 Eloquent para Jetson inicializado!"\n\
echo "=================================================="\n\
echo "Para instalar as dependências, execute:"\n\
echo "  ./setup/install_dependencies.sh"\n\
echo "=================================================="\n\
\n\
exec "$@"\n\
' > /entrypoint.sh && chmod +x /entrypoint.sh

#WORKDIR /ros2_ws

# Define o entrypoint para configurar o ambiente ROS2
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]

# Instrução para instalar pacotes adicionais após a criação do container:
# docker exec -it [CONTAINER_ID] bash -c "apt-get update && apt-get install -y build-essential cmake python3-dev && pip3 install numpy matplotlib pyyaml tensorflow"
