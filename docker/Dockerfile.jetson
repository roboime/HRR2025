FROM nvcr.io/nvidia/l4t-base:r32.6.1

# ==================== CONFIGURAÇÃO BÁSICA ====================
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG C.UTF-8
ENV ROS_DISTRO=eloquent

# ==================== NVIDIA JETPACK 4.6 ====================
# Instalar componentes essenciais do JetPack
RUN apt-get update && apt-get install -y \
    nvidia-jetpack=4.6 \
    nvidia-cuda=10.2.460 \
    nvidia-cudnn8=8.2.1.32 \
    nvidia-tensorrt=8.0.1.6 \
    nvidia-opencv=4.5.3 \
    nvidia-l4t-camera=32.6.1-20210918082159 \
    libopencv-dev \
    cuda-toolkit-10-2 \
    tensorrt \
    nvidia-l4t-camera \
    nvidia-l4t-multimedia \
    nvidia-l4t-multimedia-utils \
    v4l-utils \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-tools \
    python3-gst-1.0 \
    && rm -rf /var/lib/apt/lists/*

# Configurar permissões da câmera
RUN usermod -a -G video root

# ==================== ROS ELOQUENT ====================
# Configurar repositórios ROS2
RUN apt-get update && apt-get install -y \
    curl \
    gnupg2 \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Instalar ROS Eloquent
RUN apt-get update && apt-get install -y \
    ros-eloquent-ros-base \
    ros-eloquent-cv-bridge \
    ros-eloquent-image-transport \
    ros-eloquent-image-pipeline \
    ros-eloquent-camera-info-manager \
    ros-eloquent-camera-calibration-parsers \
    ros-eloquent-navigation2 \
    ros-eloquent-joy-linux \
    python3-colcon-common-extensions \
    python3-rosdep \
    && rm -rf /var/lib/apt/lists/*

# ==================== OTIMIZAÇÕES DE HARDWARE ====================
# Configurar variáveis de ambiente NVIDIA
ENV PATH=/usr/local/cuda-10.2/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:/usr/lib/aarch64-linux-gnu:${LD_LIBRARY_PATH}

# Configurar TensorRT
ENV TENSORRT_DIR=/usr/lib/aarch64-linux-gnu
ENV LD_LIBRARY_PATH=${TENSORRT_DIR}:${LD_LIBRARY_PATH}

# Configurar GStreamer
ENV GST_DEBUG=3
ENV NVARGUS_ENABLE=1

# ==================== AMBIENTE DE DESENVOLVIMENTO ====================
RUN apt-get update && apt-get install -y \
    git \
    python3-pip \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Dependências Python otimizadas para JetPack 4.6
RUN python3 -m pip install --upgrade pip && \
    pip3 install \
    numpy==1.19.4 \
    opencv-python==4.5.3.56 \
    pyyaml==5.4.1 \
    matplotlib==3.3.4 \
    pillow==8.4.0 \
    scikit-learn==0.24.2 \
    scikit-image==0.17.2 \
    tqdm==4.62.3 \
    albumentations==1.1.0 \
    pycocotools==2.0.4 \
    protobuf==3.19.4 \
    onnx==1.10.2 \
    jetson-stats \
    pycuda==2021.1 \
    torch==1.8.0 \
    torchvision==0.9.0 \
    --extra-index-url https://nvidia.github.io/jetson-wheels/

# Configurar variáveis de ambiente para TensorFlow e CUDA
ENV TF_FORCE_GPU_ALLOW_GROWTH=true
ENV TF_CPP_MIN_LOG_LEVEL=2
ENV CUDA_VISIBLE_DEVICES=0

# Configurações específicas para IMX219
RUN apt-get update && apt-get install -y \
    nvidia-l4t-init \
    nvidia-l4t-camera-dev \
    && rm -rf /var/lib/apt/lists/*

# Otimizações para IMX219
RUN echo 'SUBSYSTEM=="video*", ATTR{name}=="imx219", GROUP="video", MODE="0660"' > /etc/udev/rules.d/99-camera.rules
RUN echo 'options imx219 sensor_mode=2' > /etc/modprobe.d/imx219.conf

# Otimizações para Jetson
RUN echo 'nvargus-daemon' > /etc/ld.so.conf.d/nvidia.conf
RUN ldconfig

# ==================== CONFIGURAÇÃO DO WORKSPACE ====================
WORKDIR /ros2_ws

# Inicialização ROS
RUN rosdep init && rosdep update
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc

# Configurar serviços da câmera
RUN systemctl disable nvgetty
RUN echo "sudo systemctl restart nvargus-daemon" >> ~/.bashrc

# ==================== USUÁRIO NÃO-ROOT ====================
RUN useradd -m developer && \
    usermod -aG video,dialout developer && \
    chown -R developer:developer /ros2_ws

USER developer

# ==================== ENTRYPOINT ====================
COPY ./entrypoint.sh /
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]