# -------------------- Base do sistema --------------------
# Imagem ML com PyTorch/TensorFlow otimizados para L4T r36.4 (JetPack 6.2)
FROM dustynv/l4t-ml:r36.4.0

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y locales && \
    locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 TZ=Etc/UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Habilitar repositório universe (necessário para alguns pacotes, ex: spdlog)
RUN apt-get update && apt-get install -y --no-install-recommends software-properties-common && \
    add-apt-repository -y universe && \
    rm -rf /var/lib/apt/lists/*

# ROS 2 Humble (Jammy) + utilitários essenciais
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl gnupg2 lsb-release ca-certificates software-properties-common apt-transport-https \
 && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
      | gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg \
 && bash -lc 'echo "deb [arch=arm64 signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \
      http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" \
      > /etc/apt/sources.list.d/ros2.list' \
 && apt-get update && apt-get install -y --no-install-recommends \
      ros-humble-ros-base \
      ros-humble-vision-msgs \
      ros-humble-image-transport \
      ros-humble-tf2 ros-humble-tf2-ros ros-humble-tf2-geometry-msgs \
      ros-humble-rmw-fastrtps-cpp \
      ros-humble-rosidl-default-generators \
      python3-colcon-common-extensions python3-rosdep \
      python3-pip python3-dev build-essential cmake \
      # vídeo/câmera e GStreamer (a base já traz plugins, mas reforçamos ferramentas)
      v4l-utils gstreamer1.0-tools \
      # utilidades
      git wget \
 && rm -rf /var/lib/apt/lists/*

# Garantir que libspdlog.so.1 esteja resolvível (algumas bases têm versão específica)
RUN bash -lc 'set -e; LIB=/usr/lib/aarch64-linux-gnu; \
    if [ ! -e "$LIB/libspdlog.so.1" ]; then \
      CAND=$(ls "$LIB"/libspdlog.so.* 2>/dev/null | head -n1 || true); \
      if [ -n "$CAND" ]; then \
        ln -s "$(basename "$CAND")" "$LIB/libspdlog.so.1"; \
      fi; \
    fi; ldconfig'

# Plugins GStreamer de runtime úteis (jpegdec, v4l2src, mpeg, etc.)
RUN apt-get update && apt-get install -y --no-install-recommends \
      gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
      gstreamer1.0-plugins-ugly gstreamer1.0-libav \
    && rm -rf /var/lib/apt/lists/*

# TensorRT já está incluso na imagem base l4t-ml (JetPack 6.x)

# Headers do spdlog (para builds C++)
RUN apt-get update && apt-get install -y --no-install-recommends libspdlog-dev \
    && rm -rf /var/lib/apt/lists/*

# (Opcional) Cache do linker para garantir bibliotecas conhecidas
RUN ldconfig -v | grep -i spdlog || true

# NÃO instalar opencv via pip aqui. A base já inclui o OpenCV do JetPack (otimizado).
# Importante: evite instalar "libopencv-dev" do Ubuntu para não misturar com a versão da NVIDIA.

# Inicializa rosdep (ignorar erros se offline)
RUN rosdep init || true && rosdep update || true

# CUDA (JP 6.2 aponta /usr/local/cuda -> 12.6)
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/local/cuda/targets/aarch64-linux/lib:${LD_LIBRARY_PATH}

# ROS distro
ENV ROS_DISTRO=humble

# Habilitar runtime NVIDIA e acesso a vídeo/render/input
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=all
ENV QT_X11_NO_MITSHM=1
RUN usermod -a -G video,render,input root || true

# Workspace
RUN mkdir -p /ros2_ws/src
WORKDIR /ros2_ws

# Adiciona cv_bridge (vision_opencv) via source e compila sem instalar libopencv-dev
RUN bash -lc "set -e; \
    source /opt/ros/$ROS_DISTRO/setup.bash; \
    cd /ros2_ws/src; \
    if [ ! -d vision_opencv ]; then \
      git clone --depth=1 -b humble https://github.com/ros-perception/vision_opencv.git; \
    fi; \
    cd /ros2_ws; \
    rosdep update || true; \
    rosdep install --from-paths src --ignore-src -y --rosdistro $ROS_DISTRO --skip-keys=opencv --skip-keys=libopencv-dev --skip-keys=python3-opencv || true; \
    colcon build --packages-select cv_bridge --cmake-args -DCMAKE_BUILD_TYPE=Release"

# Entrypoint simples (caminho relativo ao contexto do build)
COPY docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
RUN echo 'source /opt/ros/humble/setup.bash' >> /root/.bashrc

ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
